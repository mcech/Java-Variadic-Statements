package mcech.sql;

import static java.sql.Statement.RETURN_GENERATED_KEYS;

import java.io.Closeable;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * This class establishes a connection (session) to a specific database.
 * SQL statements  are executed and results are returned within the context of a
 * connection.
 */
public class Database implements Closeable {
	/**
	 * Attempts to establish a connection to the given database URL.
	 *
	 * @param  url           A database url of the form
	 *                           jdbc:protocol://hostname/database
	 * @param  user          The database user on whose behalf the connection is
	 *                       being made
	 * @param  passwd        The users password
	 *
	 * @throws SQLException  If a database access error occurs
	 */
	public Database(String url, String user, String passwd) throws SQLException {
		con_ = DriverManager.getConnection(url, user, passwd);
		con_.setAutoCommit(true);
	}

	/**
	 * Initiates a transaction.
	 *
	 * @throws SQLException  If a database access error occurs
	 */
	public void begin() throws SQLException {
		con_.setAutoCommit(false);
	}

	/**
	 * Executes  the SQL query  and returns  the Result object  generated by the
	 * query.
	 *
	 * @param  sql           A SQL statement  that may contain  one or more  '?'
	 *                       parameter placeholders
	 * @param  params        The objects containing the input parameter values
	 *
	 * @return A Result object that contains the data produced by the query
	 *
	 * @throws SQLException  If a database access error occurs
	 */
	public Result executeQuery(String sql, Object... params) throws SQLException {
		PreparedStatement stmt = prepare(sql, params);
		try {
			return new Result(stmt);
		}
		catch (SQLException e) {
			try {stmt.close();} catch (SQLException ignore) {}
			throw e;
		}
	}

	/**
	 * Execute an SQL statement and returns the number of affected rows.
	 *
	 * @param  sql           A SQL statement  that may contain  one or more  '?'
	 *                       parameter placeholders
	 * @param  params        The objects containing the input parameter values
	 *
	 * @return Returns the number of rows  that were modified  or deleted by the
	 *         SQL statement.
	 *
	 * @throws SQLException  If a database access error occurs
	 */
	public int executeUpdate(String sql, Object... params) throws SQLException {
		try (PreparedStatement stmt = prepare(sql, params)) {
			int rows = stmt.executeUpdate();
			if (rows > 0) {
				try (ResultSet rs = stmt.getGeneratedKeys()) {
					if (rs.next()) {
						lastInsertedID_ = rs.getLong(1);
					}
				}
			}
			return rows;
		}
	}

	/**
	 * Returns the ID of the last inserted row or sequence value.
	 *
	 * @return Returns the ID of  the last inserted row,  or the last value from
	 *         a sequence object, depending on the underlying driver.
	 *
	 * @throws SQLException  If a database access error occurs
	 */
	public long lastInsertID() throws SQLException {
		return lastInsertedID_;
	}

	/**
	 * Commits a transaction
	 *
	 * @throws SQLException  If a database access error occurs
	 */
	public void commit() throws SQLException {
		con_.commit();
		con_.setAutoCommit(true);
	}

	/**
	 * Rolls back a transaction
	 *
	 * @throws SQLException  If a database access error occurs
	 */
	public void rollback() throws SQLException {
		con_.rollback();
		con_.setAutoCommit(true);
	}

	/**
	 * Closes the Connection and releases its resources.
	 *
	 * It is strongly recommended  to explicitly commit  or roll back  an active
	 * transaction prior to calling the close method.
	 */
	@Override
	public void close() {
		try {con_.close();} catch (SQLException ignore) {}
	}

	private PreparedStatement prepare(String sql, Object[] params) throws SQLException {
		PreparedStatement stmt = con_.prepareStatement(sql, RETURN_GENERATED_KEYS);
		try {
			for (int i = 0; i < params.length; ++i) {
				stmt.setObject(i + 1, params[i]);
			}
			return stmt;
		}
		catch (SQLException e) {
			try {stmt.close();} catch (SQLException ignore) {}
			throw e;
		}
	}

	private Connection con_;
	private long lastInsertedID_;
}
